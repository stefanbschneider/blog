[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Things I Learned or Want to Learn",
    "section": "",
    "text": "Tracking Link Clicks With Google Analytics\n\n\n\n\n\n\n\ngoogle analytics\n\n\n\n\nMonitor clicks to specific links on your website (outgoing, affiliate, ads, etc.) using Google Analytics GA4.\n\n\n\n\n\n\nJan 16, 2022\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nEasily editing videos with Descript\n\n\n\n\n\n\n\nvideos\n\n\nresearch\n\n\n\n\nAutomatically removing “uhms” and editing videos with text-to-speech.\n\n\n\n\n\n\nNov 2, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nCell Selection with Deep Reinforcement Learning\n\n\n\n\n\n\n\nresearch\n\n\n5g\n\n\nwireless\n\n\nmobility\n\n\noptimization\n\n\nreinforcement learning\n\n\nray\n\n\nrllib\n\n\npython\n\n\n\n\nSelf-adaptive and self-learning multi-cell selection for 5G and beyond with deep reinforcement learning.\n\n\n\n\n\n\nMay 2, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nScaling Deep Reinforcement Learning to a Private Cluster\n\n\n\n\n\n\n\npython\n\n\nray\n\n\nrllib\n\n\nmachine learning\n\n\nreinforcement learning\n\n\ncluster\n\n\n\n\nUsing Ray RLlib to train a deep reinforcement learning agent (PPO) in a custom environment on a private cluster.\n\n\n\n\n\n\nFeb 15, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nUsing Bootstrap to Style a Django App\n\n\n\n\n\n\n\npython\n\n\ndjango\n\n\nbootstrap\n\n\n\n\nUsing the crispy tag and Bootstrap 5 for nicer styling of Django apps.\n\n\n\n\n\n\nFeb 3, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nLessons Learned from Leading My First Project\n\n\n\n\n\n\n\nleadership\n\n\n\n\nSeven lessons learned from leading my first project, RealVNF.\n\n\n\n\n\n\nJan 31, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nAdding a Database to a Django App\n\n\n\n\n\n\n\ndjango\n\n\nheroku\n\n\ndatabase\n\n\ngithub\n\n\n\n\nPersistent storage using a SQL-based database for Django (development and deployment on Heroku).\n\n\n\n\n\n\nJan 29, 2021\n\n\nStefan Schneider\n\n\n\n\n\n\n  \n\n\n\n\nFastpages Notebook Blog Post\n\n\n\n\n\n\n\njupyter\n\n\nblogging\n\n\n\n\nA tutorial of fastpages for Jupyter notebooks.\n\n\n\n\n\n\nFeb 20, 2020\n\n\nfastpages\n\n\n\n\n\n\n  \n\n\n\n\nAn Example Markdown Post\n\n\n\n\n\n\n\nblogging\n\n\n\n\nA minimal example of using markdown with fastpages/Quarto.\n\n\n\n\n\n\nJan 14, 2020\n\n\nfastpages & quarto\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/google-analytics-track-links/index.html",
    "href": "posts/google-analytics-track-links/index.html",
    "title": "Tracking Link Clicks With Google Analytics",
    "section": "",
    "text": "Google Analytics has been very helpful to monitor and analyze web traffic on my blog. It provides useful insights into how frequently which of my posts and pages are visited, where visitors are from, etc. As such it already keeps track of link clicks to and within pages of my blog.\nHowever, it is often also interesting to track and monitor clicks to outgoing links, i.e., to external websites. This is useful, for example, to keep track of clicks to affiliate links on a website. Such outgoing link clicks are not tracked and shown by default in Google Analytics (the new/current GA4 version) but have to be configured manually.\nIt took me surprisingly long to figure out how to track clicks to specific (outgoing) links in Google Analytics, even though it is very simple. To spare others some time, here how it works (details and screenshots below):"
  },
  {
    "objectID": "posts/google-analytics-track-links/index.html#tracking-a-single-specific-link",
    "href": "posts/google-analytics-track-links/index.html#tracking-a-single-specific-link",
    "title": "Tracking Link Clicks With Google Analytics",
    "section": "Tracking a Single, Specific Link",
    "text": "Tracking a Single, Specific Link\nIf you want to track a single, specific link, e.g., https://www.example.com/abc, set a single matching condition with parameter link_url and operator “equals (ignore case)”. Then set the value to the specific URL of the link, e.g., https://www.example.com/abc."
  },
  {
    "objectID": "posts/google-analytics-track-links/index.html#tracking-groups-of-links",
    "href": "posts/google-analytics-track-links/index.html#tracking-groups-of-links",
    "title": "Tracking Link Clicks With Google Analytics",
    "section": "Tracking Groups of Links",
    "text": "Tracking Groups of Links\nIf you are interested in clicks to all links going to a certain website, but you do not want to distinguish clicks to different pages on that website, you can create and track a single event for all these link clicks. For example, you want to track clicks to https://www.example.com/, https://www.example.com/abc, https://www.example.com/def, etc. all together in a single event.\nFor that, you also just need a single matching condition, again using the link_url parameter. Here, simply use the operator “contains (ignore case)” instead of “equals (ignore case)” and use as value the domain name (e.g., example.com), not the full URL (e.g., https://www.example.com/abc).\nI use this approach, creating one event per external page that I am interested in, grouping all links to that page in a single event."
  },
  {
    "objectID": "posts/google-analytics-track-links/index.html#tracking-affiliate-links",
    "href": "posts/google-analytics-track-links/index.html#tracking-affiliate-links",
    "title": "Tracking Link Clicks With Google Analytics",
    "section": "Tracking Affiliate Links",
    "text": "Tracking Affiliate Links\nIt is also simple to add additional matching conditions for more fine-grained control. For example, this allows tracking clicks to affiliate links, which typically refer to one or multiple pages on a partner website and always contain a certain suffix holding the affiliate ID, e.g., ?in=569. Of course, this affiliate ID is specific to you and the website.\nTo track clicks to all affiliate links, simply extend the approach from above:\n\nUse one matching rule to capture all link clicks to pages of a certain domain with parameter link_url, operator “contains (ignore case)”, and value corresponding to the target domain (e.g., example.com).\nAdd a second matching rule (click “Add condition”) that filters out only affiliate links to the above domain. For that, use the parameter link_url, operator “contains (ignore)”, and use your affiliate ID as value (e.g., ?in=569).\n\n\n\n\nConfiguration of a new Google Analytics event for tracking link clicks to example.com with an example affiliate ID.\n\n\nFinally, click “Create” to save the newly create event - whether it is for tracking a single link, multiple links, or affiliate links. Note that the new event is often not directly included in the list of events. For me, it took several days until Google Analytics showed the new event - both in the reports and in the list of events under “Configure”."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html",
    "href": "posts/rllib-private-cluster/index.html",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "",
    "text": "Warning\n\n\n\nThis post is incomplete. See the ongoing discussion for details.\nIn this blog post, I use reinforcement learning (RL) to solve a custom optimization task (here, related to coordination in mobile networks). To this end, I use the scalable RL framework RLlib, which is part of Ray, and a custom environment, which implements the OpenAI Gym interface. As RL algorithm, I use proximal policy optimization (PPO), which is implemented in RLlib and configured in my environment.\nI first show how to train PPO on my environment when running locally. Then, to speed up training, I execute training on a private/on-premise multi-node cluster.\nWhile it is simple in principle, it took me a while to go from running RLlib and my custom environment locally to getting it to work on a private cluster. I’m hoping this guide is useful for anyone in a similar situation. In this blog post, I focus on the general workflow but use my specific environment as an example. I will cover details about my RL approach and environment in a future blog post."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#setup",
    "href": "posts/rllib-private-cluster/index.html#setup",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Setup",
    "text": "Setup\nInstallation requires Python 3.8+ and should work on Linux, Windows, and Mac. Inside a virtualenv, install RLlib with\npip install ray[rllib]\nThen install the custom environment. Here, DeepCoMP as described in the readme:\npip install deepcomp\nTest the installation with deepcomp -h, which should show the available CLI options."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#training",
    "href": "posts/rllib-private-cluster/index.html#training",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Training",
    "text": "Training\nOnce installation is complete, train a centralized RL agent with PPO in an example scenario. Note, that training will take a while (around 15min on my laptop), so running the command inside a detachable GNU screen or tmux session makes sense.\ndeepcomp --agent central --train-steps 100000 --env medium --slow-ues 3\nThis trains a centralized PPO agent for 100k training steps running on a single core. To use more cores, set the corresponding value via CLI argument --workers. The additional arguments --env and --slow-ues configure my custom DeepCoMP environment (more about that in another blog post). During training, updates should be printed on screen and progress can be monitored with TensorBoard. To start TensorBoard, run (in a separate terminal):\ntensorboard --logdir results/PPO/\nHere, the TensorBoard files are in results/PPO/, but this depends on the environment. Once started, TensorBoard can be accessed at localhost:6006.\n\n\n\nTensorBoard screenshot showing training progress."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#results",
    "href": "posts/rllib-private-cluster/index.html#results",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Results",
    "text": "Results\nIn the case of my environment, results are saved in the results directory on the project root (where deepcomp is installed) by default. To specify a custom result path, use the --result-dir CLI argument, which accepts relative paths.\nFiles in folders prefixed with PPO contain neural network weights, configuration, log, and progress files generated by RLlib. They are useful for analyzing training progress or when loading a trained agent for inference (--test arg) or continued training (--continue). Additionally, folders test and videos are generated by DeepCoMP and contain easy-to-parse testing/evaluation results and rendered videos, depending on the DeepCoMP CLI args (--eval and --video).\nOf course, this is just an example. Results are saved differently for each problem and environment."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#preparations",
    "href": "posts/rllib-private-cluster/index.html#preparations",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Preparations",
    "text": "Preparations\nWhile there are virtually no code changes required in the environment, some preparation steps were necessary for me to get RLlib to work on our private/on-premise cluster.\n\nCluster Configuration\nThe Ray cluster configuration is saved in a YAML file. My configuration file is here.\nThe most relevant fields concern information about the private cluster:\nprovider:\n    type: local\n    head_ip: &lt;head-machine-ip-or-address&gt;\n    worker_ips:\n        - &lt;worker1-ip&gt;\n        - &lt;worker2-ip&gt;\nHere, type: local indicates that the cluster is local/private/on premise. The head IP or address points to the head node, i.e., the machine that should coordinate the cluster. To execute commands and train my RL agent, I will later attach to the head node, start training and TensorBoard, and finally retrieve results. The workers are other machines in the cluster on which the training is executed.\nDepending on the number of workers listed under worker_ips, also set min_workers and max_workers to the same value.\nFor authentication when logging into the workers and distributing computation across them, also configure auth:\nauth:\n    ssh_user: stefan\n    # Optional if an ssh private key is necessary to ssh to the cluster\n    # This is the SSH key of the local laptop, not of the head node\n    ssh_private_key: ~/.ssh/id_rsa\n\n\nInstallation\nTo run code on the workers, install ray[rllib] and the custom environment deepcomp on each worker machine of the cluster. All nodes in the cluster must have the same Python and same ray version (check with --version inside the virutalenv).\nMaybe this can be avoided, eg, by using Docker images that are pulled automatically?\n\n\nSSH Access\nThe head node needs ssh access to all worker nodes. Ensure the head node’s public SSH key is registered as authorized key (in ssh/authorized_keys) in all worker nodes. The head node’s private key path should be configured in the cluster.yaml.\nIn fact, the private key configured in cluster.yaml is the private key of the local laptop that controls the cluster. Not the head node.\n\n\nray command\nThe ray command needs to be available on all cluster nodes. If the ray command is not available on the cluster, trying to start the cluster will crash with the error Command 'ray' not found ... Failed to setup head node..\nIf ray is installed in a virtual environment, the easiest option is to automatically source the virtualenv on each login. Particularly, adding the following line to .bashrc will source the virtualenv:\nsource path/to/venv/bin/activate\nWhere path/to/venv needs to point to the virtualenv. The change is in effect after log out and back in.\nThen ray --version should run without errors.\n\n\nConnect to Ray cluster\nTo ensure that running ray connects to the same cluster and the same Redis DB, use ray.init(address='auto'). Without argument address='auto', execution on the cluster does not work.\nHowever, for me, adding address='auto' breaks local execution. Hence, I added an optional CLI argument --cluster to my custom deepcomp environment, which adds address='auto' for running the environment on a cluster without code changes."
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#starting-the-ray-cluster",
    "href": "posts/rllib-private-cluster/index.html#starting-the-ray-cluster",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Starting the Ray Cluster",
    "text": "Starting the Ray Cluster\n\nOn the local machine\nStart cluster:\n# start the cluster (non-blocking)\nray up cluster.yaml\n\n# forward the cluster dashboard to the local machine (this is a blocking command)\nray dashboard cluster.yaml\nView dashboard: http://localhost:8265\n\n\n\n\n\n\nWarning\n\n\n\nThis currently doesn’t work for me. It only shows the head node, not the workers.\n\n\nConnect to cluster and run command for training. Note, you can attach but not detach. Thus, better to run this in a screen/tmux session.\nray attach cluster.yaml\ndeepcomp --agent central --train-steps 100000 --env medium --slow-ues 3 --cluster --workers XY\nOnce training completed, detach/close terminal with Ctrl+D.\n\n\nMonitoring Training Progress\n\nTraining updates should be printed inside the attached terminal\nOn the cluster’s head node, htop should show ray::RolloutWorker running.\nOn the cluster’s worker nodes, htop should show ray::PPO()::train() (or similar) to indicate the training is running.\nMonitor progress with Tensorboard running tensorboard --host 0.0.0.0 --logdir results/PPO/ on the cluster’s head node. Then access on &lt;head-node-ip&gt;:6006.\n\n\n\n\n\n\n\nWarning\n\n\n\nThis currently doesn’t work for me. It seems like the program is only running on the head nodes, not at all on the workers.\n\n\n\n\nRetrieving Training & Testing Results\nFrom the local laptop, use ray rsync-down to copy the result files from the cluster’s head node to the local laptop:\n# ray rsync-down &lt;cluster-config&gt; &lt;source&gt; &lt;target&gt;\nray rsync-down cluster.yaml ~/DeepCoMP/results .\nWill be copied to local directory into results.\n\n\nTerminating the Cluster\nFrom the local laptop:\nray down cluster.yaml"
  },
  {
    "objectID": "posts/rllib-private-cluster/index.html#debugging",
    "href": "posts/rllib-private-cluster/index.html#debugging",
    "title": "Scaling Deep Reinforcement Learning to a Private Cluster",
    "section": "Debugging",
    "text": "Debugging\nIf the process above does not work, the logs may contain helpful information for debugging the problem. To print the logs, run on the cluster’s head node:\ncat /tmp/ray/session_latest/logs/monitor.*\nTo print a status overview of the cluster:\n ray status --address &lt;address:port&gt;\nWhere &lt;address:port&gt; belongs to the cluster and is displayed when starting it with ray up cluster.yaml (after To connect to this Ray runtime from another node, run ...).\n\nCommon Errors\n\nCommand 'ray' not found when trying to start the cluster\n\nThe ray command is not available on the head node after SSH. One solution is to source the virtualenv with ray in the .bashrc or to install ray system-wide.\n\nRepeatedly autoscaler +4m36s) Adding 1 nodes of type ray-legacy-head-node-type. when training on the cluster\n\n??\n\nWhen trying to run code on the cluster after ray attach cluster.yaml: (raylet) OSError: [Errno 98] Address already in use\n\n?? Is the redis server already running; something wrong with the cluster ??\nStopping and restarting the cluster seems to fix the problem: Detach, then from the laptop stop the cluster: ray down cluster.yaml, then start it again ray up cluster.yaml\n\nAll load seems to be just on the cluster head and nothing is distributed to the workers (when observing with htop)\n\n??\n\nIn the logs:\n\nERROR monitor.py:264 -- Monitor: Cleanup exception. Trying again...\n1 random worker nodes will not be shut down. (due to --keep-min-workers)"
  },
  {
    "objectID": "posts/my-first-project/index.html",
    "href": "posts/my-first-project/index.html",
    "title": "Lessons Learned from Leading My First Project",
    "section": "",
    "text": "Today is the last day of my first bigger project, RealVNF, which I have been leading for 27 months (Nov. 2018 - Jan. 2021). Early 2018, I applied for the project through the Software Campus and received a €100k grant for hiring student research assistants, traveling, equipment, etc. I also had the opportunity to participate in several leadership trainings organized by companies across Germany. The project itself was research-focused and a collaboration with researchers from Huawei Germany (more info the website).\nI found that leading the project was surprisingly challenging but, in the end, definitely successful and a great experience. This blog post reflects on the last 27 months and summarizes seven lessons learned from a leadership/project management perspective."
  },
  {
    "objectID": "posts/my-first-project/index.html#put-effort-into-recruiting-the-right-people",
    "href": "posts/my-first-project/index.html#put-effort-into-recruiting-the-right-people",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Put Effort Into Recruiting the Right People",
    "text": "Put Effort Into Recruiting the Right People\nRecruiting the right people for the project was very important. Most of the people I hired at the beginning stayed until the end of the project.\nInitially, I posted the job openings broadly online and received many applications. I also directly asked talented people I knew to apply. To avoid interviewing dozens of applicants, I introduced a small programming exercise that applicants had to submit. It was doable in maybe 1-3 hours using basic Python and tools like GitHub. I invited applicants who finished this first task to an interview, asking them to read a selected research paper up front and prepare to summarize it during the interview.\nBoth tasks meant initial extra work for both me and the applicants but helped to select the most suitable candidates for the project. In the end, I got to work with motivated and talented people, who made the project a success."
  },
  {
    "objectID": "posts/my-first-project/index.html#talk-to-potential-users-early",
    "href": "posts/my-first-project/index.html#talk-to-potential-users-early",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Talk to Potential Users Early",
    "text": "Talk to Potential Users Early\nWhen preparing the initial project plan, of course, I discussed it with people in my group at university. Still, it was only when talking to the researchers at Huawei, I understood that they had a very different perspective on the problem we were trying to solve. We spent the first months discussing and aligning our understanding of the problem and possible solution approaches. These discussions were very valuable to ensure that the work in the project was actually relevant and helpful in practice. As a leading company in networking, Huawei is a potential user of our developed coordination schemes and thus was an ideal project partner.\nEspecially in academia, it is easy to get excited about an idea without properly thinking (or even understanding) its relevance in practice. Whether in academia or industry, I believe it is very important to talk to potential users/customers early and understand their needs before designing a solution. This is related to the concept of design thinking."
  },
  {
    "objectID": "posts/my-first-project/index.html#start-small-scale-quickly",
    "href": "posts/my-first-project/index.html#start-small-scale-quickly",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Start Small, Scale Quickly",
    "text": "Start Small, Scale Quickly\nWhen starting the project, we had tons of interesting ideas and thought of a variety of relevant problem aspects that we wanted to address. Creating an approach from scratch that incorporates all ideas and considers all problem aspects would have been prohibitively complex. Instead, it was important to quickly identify the most important aspects and most promising ideas and simplify everything else. This helped to get started quickly.\nOnce the simple approach worked, we could extend it to integrate more ideas and address more problem aspects. It is also helpful to have a working prototype at all times: First for the smallest and simplest case, then for more and more complex scenarios. This allows running evaluations for each stage and quantifying progress. Trying to solve everything at once can be overwhelming and makes it difficult to understand the root cause of problems or bugs. Building on something that works already is much simpler, faster, and less error prone. Versioning everything allows going back to previous, working versions if something breaks in between.\nOf course, it makes sense to think of a realistic roadmap and architecture at the beginning to have a clear direction and ensure that initial solutions can easily be extended later."
  },
  {
    "objectID": "posts/my-first-project/index.html#focus-on-just-a-few-topics-at-once",
    "href": "posts/my-first-project/index.html#focus-on-just-a-few-topics-at-once",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Focus on Just a Few Topics at Once",
    "text": "Focus on Just a Few Topics at Once\nAt the beginning, I was wondering whether I should assign all students working on the project to their own topic or to let them all work on the same topic. The former would allow more parallelization and independent work, thus less dependencies and blocking each other. Still, I found that it was much easier focusing all work on just one or two topics (of course, still with different tasks). Not only did it help drive progress faster, it also allowed more productive meetings and discussions between team members.\nWhile this worked well for my project with 3-4 people, it will likely be different for much larger projects."
  },
  {
    "objectID": "posts/my-first-project/index.html#planning-is-everything.-the-plan-is-nothing.",
    "href": "posts/my-first-project/index.html#planning-is-everything.-the-plan-is-nothing.",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Planning is Everything. The Plan is Nothing.",
    "text": "Planning is Everything. The Plan is Nothing.\nEspecially in a research-focused project like RealVNF, there is a lot of uncertainty, e.g., about experiment outcomes, where the outcome of one task affects the next one. This makes mid-/long-term planning very difficult.\nI found it useful to have a high-level “storyline” in mind with intermediate milestones, but to frequently adjust it to new insights or results. When interpreting results and adjusting the plan, we always discussed and decided next steps in the group. It is important for motivation to not only understand what a task is about but also why it is relevant. In general, frequent and clear communication within the team was crucial to quickly adapt to new outcomes and avoid wasting time."
  },
  {
    "objectID": "posts/my-first-project/index.html#clear-frequent-and-open-communication-within-the-team",
    "href": "posts/my-first-project/index.html#clear-frequent-and-open-communication-within-the-team",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Clear, Frequent, and Open Communication Within the Team",
    "text": "Clear, Frequent, and Open Communication Within the Team\nFrequent communication with and within the team is crucial. Still, I did not want to waste everyone’s time with unnecessary meetings. For us, weekly group meetings worked quite well. I structured each meeting into status updates, discussion items, and tasks for the next week and tried to limit them to at most an hour. Upcoming tasks need to be communicated very clearly (goal, scope, time) to avoid misunderstandings. Sending out short notes after each meeting helped to keep everyone on the same page.\nFor an overview of past, current, and upcoming tasks, we also used GitHub issues and project boards (Kanban boards). Additionally, we defined high-level monthly goals/milestones to keep the project a bit more focused. To keep the discussion going during the week and quickly adapt to new experiment outcomes or new insights, we kept in touch via Slack constantly.\nWe also did individual feedback discussions every now and then, which were really useful. In retrospective, I would do one-to-one meetings more regularly to better understand each team member’s needs and interests. It is important to encourage open communication at all times such that team members say if they have too many or too few tasks. Both is demotivating. At the same time, it can be difficult to estimate how quickly someone will progress with a task.\nFinally, while communication and tooling still worked well when working remotely during COVID-19, social meetings were no longer possible. Such social meetings were nice to hang out informally and improve team spirit."
  },
  {
    "objectID": "posts/my-first-project/index.html#embrace-bureaucracy",
    "href": "posts/my-first-project/index.html#embrace-bureaucracy",
    "title": "Lessons Learned from Leading My First Project",
    "section": "Embrace Bureaucracy",
    "text": "Embrace Bureaucracy\nI suppose any bigger project comes with bureaucracy. In my case, I had to communicate with the funding partner and the university’s administration. Sometimes, I was surprised by the amount of rules, formulas, and processes for hiring people, traveling, and buying equipment - even with the money available (i.e., after securing the grant).\nAs a small anecdote, I tried to hire student research assistants for the project to start with the beginning of the project in November. Unfortunately, this was not possible and I was told that new contracts could not start at the end of a year. I had to wait until January for hiring the students. In January, I was asked why I did not follow my original budget plan and did not spend any money on staff during the first two months (November and December)…\nStill, while some rules may be a bit bizarre, all people in the administration were friendly and helpful. I understood that I had to identify the right people to ask and keep asking persistently to eventually understand the rules and get what I needed."
  },
  {
    "objectID": "posts/test-markdown-post/index.html",
    "href": "posts/test-markdown-post/index.html",
    "title": "An Example Markdown Post",
    "section": "",
    "text": "Note\n\n\n\nThis post was generated by fastpages and kept for reference.\nNote that the blog was later moved from fastpages to Quarto and this page was adjusted. Still not all tips may be up to date anymore. More useful tips on authoring with Markdown are in the Quarto Guide."
  },
  {
    "objectID": "posts/test-markdown-post/index.html#basic-setup",
    "href": "posts/test-markdown-post/index.html#basic-setup",
    "title": "An Example Markdown Post",
    "section": "Basic setup",
    "text": "Basic setup\nJekyll requires blog post files to be named according to the following format:\nYEAR-MONTH-DAY-filename.md\nWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files.\nThe first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above."
  },
  {
    "objectID": "posts/test-markdown-post/index.html#basic-formatting",
    "href": "posts/test-markdown-post/index.html#basic-formatting",
    "title": "An Example Markdown Post",
    "section": "Basic formatting",
    "text": "Basic formatting\nYou can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule:"
  },
  {
    "objectID": "posts/test-markdown-post/index.html#lists",
    "href": "posts/test-markdown-post/index.html#lists",
    "title": "An Example Markdown Post",
    "section": "Lists",
    "text": "Lists\nHere’s a list:\n\nitem 1\nitem 2\n\nAnd a numbered list:\n\nitem 1\nitem 2"
  },
  {
    "objectID": "posts/test-markdown-post/index.html#callout-boxes-and-stuff",
    "href": "posts/test-markdown-post/index.html#callout-boxes-and-stuff",
    "title": "An Example Markdown Post",
    "section": "Callout Boxes and stuff",
    "text": "Callout Boxes and stuff\n\nThis is a quotation\n\n\n\n\n\n\n\nTip\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\nand\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "posts/test-markdown-post/index.html#images",
    "href": "posts/test-markdown-post/index.html#images",
    "title": "An Example Markdown Post",
    "section": "Images",
    "text": "Images\n\n\n\n“fast.ai’s logo”"
  },
  {
    "objectID": "posts/test-markdown-post/index.html#code",
    "href": "posts/test-markdown-post/index.html#code",
    "title": "An Example Markdown Post",
    "section": "Code",
    "text": "Code\nYou can format text and code per usual\nGeneral preformatted text:\n# Do a thing\ndo_thing()\nPython code and output:\n# Prints '2'\nprint(1+1)\n2\nFormatting text as shell commands:\necho \"hello world\"\n./some_script.sh --option \"value\"\nwget https://example.com/cat_photo1.png\nFormatting text as YAML:\nkey: value\n- another_key: \"another value\""
  },
  {
    "objectID": "posts/test-markdown-post/index.html#tables",
    "href": "posts/test-markdown-post/index.html#tables",
    "title": "An Example Markdown Post",
    "section": "Tables",
    "text": "Tables\n\n\n\nColumn 1\nColumn 2\n\n\n\n\nA thing\nAnother thing"
  },
  {
    "objectID": "posts/test-markdown-post/index.html#equations",
    "href": "posts/test-markdown-post/index.html#equations",
    "title": "An Example Markdown Post",
    "section": "Equations",
    "text": "Equations\nInline: \\(E = mc^2\\) And display math:\n\\[\\alpha \\beta \\gamma\\]"
  },
  {
    "objectID": "posts/test-markdown-post/index.html#footnotes",
    "href": "posts/test-markdown-post/index.html#footnotes",
    "title": "An Example Markdown Post",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the footnote.↩︎"
  },
  {
    "objectID": "posts/deepcomp/index.html",
    "href": "posts/deepcomp/index.html",
    "title": "Cell Selection with Deep Reinforcement Learning",
    "section": "",
    "text": "5G tower image by Christoph Scholz under CC BY-SA 2.0 license.\nIn the last year, I have worked a lot on mobility management and cell selection in mobile networks, which is very relevant for upcoming 5G networks and beyond. In this blog post, I try to give a brief, high-level overview of my research, describing what cell selection is, why it is important yet challenging. I also outline how I solved the cell selection problem with modern self-learning techniques and visualize the outcomes.\nThe whole blog post is meant for people who are interested but do not have a scientific background or extensive knowledge in the area. The corresponding research paper is accepted at 2023 IEEE Transactions on Network and Service Management (TNSM); a preprint is available here.\nEither way, if something is unclear, or you have open questions, feel free to reach out to me. My contact information is on my website."
  },
  {
    "objectID": "posts/deepcomp/index.html#centralized-cell-selection-with-deepcomp",
    "href": "posts/deepcomp/index.html#centralized-cell-selection-with-deepcomp",
    "title": "Cell Selection with Deep Reinforcement Learning",
    "section": "Centralized cell selection with DeepCoMP",
    "text": "Centralized cell selection with DeepCoMP\nAs a centralized approach, DeepCoMP assumes global knowledge and control of all users. This means, DeepCoMP needs to collect information from all users in a central location, e.g., about users’ current connections, signal strength, etc. Similarly, DeepCoMP represents a single, centralized entity that selects cells for all users simultaneously. This is illustrated in the figure below.\n\n\n\nCentralized approach: DeepCoMP"
  },
  {
    "objectID": "posts/deepcomp/index.html#distributed-cell-selection-with-dd-comp-and-d3-comp",
    "href": "posts/deepcomp/index.html#distributed-cell-selection-with-dd-comp-and-d3-comp",
    "title": "Cell Selection with Deep Reinforcement Learning",
    "section": "Distributed cell selection with DD-CoMP and D3-CoMP",
    "text": "Distributed cell selection with DD-CoMP and D3-CoMP\nIn addition to the centralized DeepCoMP approach, I also propose two distributed approaches, called DD-CoMP and D3-CoMP. These approaches use multi-agent reinforcement learning, where multiple “agents” select cells independently in parallel. Particularly, I assume one agent per user, which observes the users current connections, signal strength, etc. and selects suitable cells. Because each agent only cares about its own user, it is much simpler to implement and use than the centralized DeepCoMP approach. This is visualized in the figure below.\n\n\n\nDistributed approaches: DD-CoMP and D3-CoMP\n\n\nIn reinforcement learning, such agents are initially trained, where they test and learn from many different actions, and then apply their learned policy (in the “inference” phase). In DD-CoMP training experience from all users is combined to learn cell selection more efficiently. In D3-CoMP each agent trains independently from all other agents and only uses experience from its own user. This allows to reduce communication between agents."
  },
  {
    "objectID": "posts/test-notebook-post/index.html",
    "href": "posts/test-notebook-post/index.html",
    "title": "Fastpages Notebook Blog Post",
    "section": "",
    "text": "Note\n\n\n\nThis post was generated by fastpages and kept for reference.\nFuture posts should be written as .qmd files as described here."
  },
  {
    "objectID": "posts/test-notebook-post/index.html#front-matter",
    "href": "posts/test-notebook-post/index.html#front-matter",
    "title": "Fastpages Notebook Blog Post",
    "section": "Front Matter",
    "text": "Front Matter\nThe first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n# \"My Title\"\n&gt; \"Awesome summary\"\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain & Jeremy Howard\n- categories: [fastpages, jupyter]\n\nSetting toc: true will automatically generate a table of contents\nSetting badges: true will automatically include GitHub and Google Colab links to your notebook.\nSetting comments: true will enable commenting on your blog post, powered by utterances.\n\nThe title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README."
  },
  {
    "objectID": "posts/test-notebook-post/index.html#markdown-shortcuts",
    "href": "posts/test-notebook-post/index.html#markdown-shortcuts",
    "title": "Fastpages Notebook Blog Post",
    "section": "Markdown Shortcuts",
    "text": "Markdown Shortcuts\nA #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post.\nA #hide_input comment at the top of any code cell will only hide the input of that cell.\n\n\nThe comment #hide_input was used to hide the code that produced this.\n\n\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n\nCode\nimport pandas as pd\nimport altair as alt\n\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n\nCode\ncars = 'https://vega.github.io/vega-datasets/data/cars.json'\nmovies = 'https://vega.github.io/vega-datasets/data/movies.json'\nsp500 = 'https://vega.github.io/vega-datasets/data/sp500.csv'\nstocks = 'https://vega.github.io/vega-datasets/data/stocks.csv'\nflights = 'https://vega.github.io/vega-datasets/data/flights-5k.json'\n\n\nplace a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it:\n\n#collapse-output\nprint('The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.')\n\nThe comment #collapse-output was used to collapse the output of this cell by default but you can expand it."
  },
  {
    "objectID": "posts/test-notebook-post/index.html#interactive-charts-with-altair",
    "href": "posts/test-notebook-post/index.html#interactive-charts-with-altair",
    "title": "Fastpages Notebook Blog Post",
    "section": "Interactive Charts With Altair",
    "text": "Interactive Charts With Altair\nCharts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook.\n\nExample 1: DropDown\n\n# single-value selection over [Major_Genre, MPAA_Rating] pairs\n# use specific hard-wired values as the initial selected values\nselection = alt.selection_single(\n    name='Select',\n    fields=['Major_Genre', 'MPAA_Rating'],\n    init={'Major_Genre': 'Drama', 'MPAA_Rating': 'R'},\n    bind={'Major_Genre': alt.binding_select(options=genres), 'MPAA_Rating': alt.binding_radio(options=mpaa)}\n)\n  \n# scatter plot, modify opacity based on selection\nalt.Chart(df).mark_circle().add_selection(\n    selection\n).encode(\n    x='Rotten_Tomatoes_Rating:Q',\n    y='IMDB_Rating:Q',\n    tooltip='Title:N',\n    opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05))\n)\n\n\n\n\n\n\n\n\n\nExample 2: Tooltips\n\nalt.Chart(df).mark_circle().add_selection(\n    alt.selection_interval(bind='scales', encodings=['x'])\n).encode(\n    alt.X('Rotten_Tomatoes_Rating', type='quantitative'),\n    alt.Y('IMDB_Rating', type='quantitative', axis=alt.Axis(minExtent=30)),\n#     y=alt.Y('IMDB_Rating:Q', ), # use min extent to stabilize axis title placement\n    tooltip=['Title:N', 'Release_Date:N', 'IMDB_Rating:Q', 'Rotten_Tomatoes_Rating:Q']\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\nExample 3: More Tooltips\n\n# select a point for which to provide details-on-demand\nlabel = alt.selection_single(\n    encodings=['x'], # limit selection to x-axis value\n    on='mouseover',  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty='none'     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X('date:T'),\n    alt.Y('price:Q', scale=alt.Scale(type='log')),\n    alt.Color('symbol:N')\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='date:T'\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='price:Q'\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='price:Q'\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#data-tables",
    "href": "posts/test-notebook-post/index.html#data-tables",
    "title": "Fastpages Notebook Blog Post",
    "section": "Data Tables",
    "text": "Data Tables\nYou can display tables per the usual way in your blog:\n\n# display table with pandas\ndf[['Title', 'Worldwide_Gross', \n    'Production_Budget', 'Distributor', 'MPAA_Rating', 'IMDB_Rating', 'Rotten_Tomatoes_Rating']].head()\n\n\n\n\n\n\n\n\nTitle\nWorldwide_Gross\nProduction_Budget\nDistributor\nMPAA_Rating\nIMDB_Rating\nRotten_Tomatoes_Rating\n\n\n\n\n0\nThe Land Girls\n146083.0\n8000000.0\nGramercy\nR\n6.1\nNaN\n\n\n1\nFirst Love, Last Rites\n10876.0\n300000.0\nStrand\nR\n6.9\nNaN\n\n\n2\nI Married a Strange Person\n203134.0\n250000.0\nLionsgate\nNone\n6.8\nNaN\n\n\n3\nLet's Talk About Sex\n373615.0\n300000.0\nFine Line\nNone\nNaN\n13.0\n\n\n4\nSlam\n1087521.0\n1000000.0\nTrimark\nR\n3.4\n62.0"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#images",
    "href": "posts/test-notebook-post/index.html#images",
    "title": "Fastpages Notebook Blog Post",
    "section": "Images",
    "text": "Images\n\nLocal Images\nYou can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax:\n![](images/fastai.png)\n\n\n\nRemote Images\nRemote images can be included with the following markdown syntax:\n![](https://image.flaticon.com/icons/svg/36/36686.svg) (just and example; link broken)\n\n\nAnimated Gifs\nAnimated Gifs work, too!\n![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)\n\n\n\nCaptions\nYou can include captions with markdown images like this:\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#github-flavored-emojis",
    "href": "posts/test-notebook-post/index.html#github-flavored-emojis",
    "title": "Fastpages Notebook Blog Post",
    "section": "GitHub Flavored Emojis",
    "text": "GitHub Flavored Emojis\nTyping I give this post two :+1:! will render this:\nI give this post two :+1:!"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#tweetcards",
    "href": "posts/test-notebook-post/index.html#tweetcards",
    "title": "Fastpages Notebook Blog Post",
    "section": "Tweetcards",
    "text": "Tweetcards\nTyping &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this:\n\ntwitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#youtube-videos",
    "href": "posts/test-notebook-post/index.html#youtube-videos",
    "title": "Fastpages Notebook Blog Post",
    "section": "Youtube Videos",
    "text": "Youtube Videos\nTyping &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this:"
  },
  {
    "objectID": "posts/test-notebook-post/index.html#boxes-callouts",
    "href": "posts/test-notebook-post/index.html#boxes-callouts",
    "title": "Fastpages Notebook Blog Post",
    "section": "Boxes / Callouts",
    "text": "Boxes / Callouts\nTyping &gt; Warning: There will be no second warning! will render this:\n\n\n\n\n\n\nWarning\n\n\n\nThere will be no second warning!\n\n\nTyping &gt; Important: Pay attention! It's important. will render this:\n\n\n\n\n\n\nImportant\n\n\n\nPay attention! It’s important.\n\n\nTyping &gt; Tip: This is my tip. will render this:\n\n\n\n\n\n\nTip\n\n\n\nThis is my tip.\n\n\nTyping &gt; Note: Take note of this. will render this:\n\n\n\n\n\n\nNote\n\n\n\nTake note of this.\n\n\nTyping &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\n\n\n\n\n\nNote\n\n\n\nA doc link to an example website: fast.ai should also work fine."
  },
  {
    "objectID": "posts/test-notebook-post/index.html#footnotes",
    "href": "posts/test-notebook-post/index.html#footnotes",
    "title": "Fastpages Notebook Blog Post",
    "section": "Footnotes",
    "text": "Footnotes\nYou can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this:\n{% raw %}For example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ 'This is the footnote.' | fndetail: 1 }}\n{{ 'This is the other footnote. You can even have a [link](https://stefanbschneider.github.io/)!' | fndetail: 2 }}{% endraw %}\nFor example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ ‘This is the footnote.’ | fndetail: 1 }} {{ ‘This is the other footnote. You can even have a link!’ | fndetail: 2 }}"
  },
  {
    "objectID": "posts/django-bootstrap/index.html",
    "href": "posts/django-bootstrap/index.html",
    "title": "Using Bootstrap to Style a Django App",
    "section": "",
    "text": "Django allows building simple (and complex) web apps quickly, using Django Templates for rendering. By default, forms, buttons, and other elements are not styled and look quite ugly:\nUsing Bootstrap and django-crispy-forms, the rendered templates can easily be improved to look much nicer, without having to adjust styling manually. For example:\nAs an example, I extend my Django “Hello World” App (described in a previous post) by adding a simple form and rendering it with Bootstrap and django-crispy-forms. All it does is asking for the user’s name and a date and then displaying &lt;username&gt; says \"Hello World!\" on &lt;date&gt; and a counter of how often the button has been clicked. Still, the small example illustrates how to use Bootstrap and django-crispy-forms. Especially with many or large forms, django-crispy-forms becomes useful to reduce repetitive boilerplate."
  },
  {
    "objectID": "posts/django-bootstrap/index.html#creating-a-django-form",
    "href": "posts/django-bootstrap/index.html#creating-a-django-form",
    "title": "Using Bootstrap to Style a Django App",
    "section": "Creating a Django Form",
    "text": "Creating a Django Form\nAs an example, I create a new form that allows users to specify their name and an arbitrary date that will be displayed in the “Hello World” app. For that, I create helloworld/forms.py with the following content:\nimport datetime\n\nfrom django import forms\n\n\nclass HelloWorldForm(forms.Form):\n    \"\"\"Form asking for the user's name and an arbitrary date, both used inside the displayed 'Hello World' text.\"\"\"\n    username = forms.CharField(label='Your Name', max_length=100)\n    date = forms.DateField(label='An arbitrary date', initial=datetime.date.today,\n                           widget=forms.widgets.DateInput(attrs={'type': 'date'}),\n                           help_text='The entered name and date will be displayed temporarily but publicly in the '\n                                     'generated \"Hello World\" message. It will not be stored.')\nMost field arguments are optional but provide additional information for django-crispy-forms to display in the Bootstrap form.\nI then use this form inside views.py for my index view (the only view of the “Hello World” app so far):\ndef index(request):\n    # retriever counter model instance from DB or create it if it doesn't exist yet\n    counter, created = Counter.objects.get_or_create(name='hello-world-button')\n\n    # increment counter when a POST request arrives (from the button click)\n    # see previous blog post: https://stefanbschneider.github.io/blog/django-db\n    if request.method == 'POST':\n        counter.value += 1\n        counter.save()\n\n        # and get the values filled in form\n        form = HelloWorldForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            date = form.cleaned_data['date']\n\n    else:\n        form = HelloWorldForm()\n        username = 'Nobody'\n        date = datetime.date.today()\n\n    context = {\n        'clicks': counter.value,\n        'form': form,\n        'username': username,\n        'date': date,\n    }\n    return render(request, 'helloworld/index.html', context)\nFinally, show the form in the index.html template:\n&lt;div class=\"alert alert-success\" role=\"alert\"&gt;\n    {{ username }} says: \"Hello World!\" on {{ date }}. (Button clicked {{ clicks }}x in total.)\n&lt;/div&gt;\n\n&lt;form action=\"{% url 'helloworld:index' %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form }}\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Greet the world!&lt;/button&gt;\n&lt;/form&gt;\nNow, when running the development server, the app shows the new form:\n\n\n\nDjango form without Bootstrap\n\n\nThe “Hello World” message should display the entered username and date as well as the total click count. However, the form does not yet use Bootstrap and is still quite ugly!"
  },
  {
    "objectID": "posts/django-bootstrap/index.html#making-the-form-pretty",
    "href": "posts/django-bootstrap/index.html#making-the-form-pretty",
    "title": "Using Bootstrap to Style a Django App",
    "section": "Making the Form Pretty",
    "text": "Making the Form Pretty\nTo make the form look nicer, I first include Bootstrap. For using Bootstrap, simply include the Bootstrap CCS and JavaScript inside the head of the Django app’s main/base template. The Bootstrap website has the latest instructions.\nFor my “Hello World” Django app, I simply add the following lines inside helloworld/templates/helloworld/index.html:\n&lt;head&gt;\n    &lt;title&gt;Hello World&lt;/title&gt;\n    \n    {#  Bootstrap  #}\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\n&lt;!--    other includes --&gt;\n&lt;/head&gt;\n&lt;!-- body --&gt;\nThis loads the new Bootstrap 5 from the JSDeliver CDN network so it can be used within the Django app templates. Now, the alert and button should already look nicer, but the form fields will still look ugly.\nTo also render the form fields with Bootstrap, I use django-crispy-forms. All it takes, is loading crispy and passing the form to crispy inside index.html:\n{% load crispy_forms_tags %}\n\n&lt;div class=\"alert alert-success\" role=\"alert\"&gt;\n    {{ username }} says: \"Hello World!\" on {{ date }}. (Button clicked {{ clicks }}x in total.)\n&lt;/div&gt;\n\n&lt;form action=\"{% url 'helloworld:index' %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form | crispy }}\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Greet the world!&lt;/button&gt;\n&lt;/form&gt;\nNow, the Django app should be rendered with Bootstrap and already look much nicer:\n\n\n\nDjango form styled with Bootstrap\n\n\nThe nice thing is that crispy will handle all the overhead of styling each form field with bootstrap, which is particularly useful when having many large forms inside a Django app."
  },
  {
    "objectID": "posts/descript/index.html",
    "href": "posts/descript/index.html",
    "title": "Easily editing videos with Descript",
    "section": "",
    "text": "After the Covid outbreak, many conferences and similar events were moved online or into a hybrid format. For me as researcher, this means that I now only rarely present my research outcomes live in person. Instead, I record more and more videos of my conferences presentations to share online as part of online conferences. Some of them are also on YouTube.\nI noticed that I tend to use filler words like “uhm”, “äh”, “like”, etc, which are even more annoying in recorded and publishded videos than in live, in-person presentations. Of course, I practice my talks before recording, but it is difficult to get rid of bloopers and filler words completely without editing.\nSince I am not used to video editing, manually searching for and removing filler words in long presentations would have meant hours of work. Hence, I searched for some tool to support this editing process and found Descript, which does exactly what I needed: It can record presentations, converts speech to text, automatically detects and removes filler words, improves audio, and more. To edit and remove parts of the videos, simply delete the corresponding auto-generated text like you would in Word."
  },
  {
    "objectID": "posts/descript/index.html#demonstration",
    "href": "posts/descript/index.html#demonstration",
    "title": "Easily editing videos with Descript",
    "section": "Demonstration",
    "text": "Demonstration\nHere is a short demonstration of how it works:\n\nOf course, it is not perfect yet and sometimes words are recognized incorrectly. But overall, I was very impressed by how well it usually works, plus there are frequent updates and improvements. It has certainly saved me hours of editing and significantly improved my videos. Since it took me a while to find the tool, I wanted to spread the word in this blog post, hopefully saving others some time."
  },
  {
    "objectID": "posts/descript/index.html#product-video",
    "href": "posts/descript/index.html#product-video",
    "title": "Easily editing videos with Descript",
    "section": "Product Video",
    "text": "Product Video\nFor more available features, check out the product video/advertisement, which I find very entertaining:"
  },
  {
    "objectID": "posts/descript/index.html#try-it-yourself",
    "href": "posts/descript/index.html#try-it-yourself",
    "title": "Easily editing videos with Descript",
    "section": "Try It Yourself",
    "text": "Try It Yourself\nYou can try Descript for free for some hours (but with watermark, I think). After that, there is a discounted plan for students/non-profit, which might be useful, or more powerful plans for creators, professionals, or enterprises."
  },
  {
    "objectID": "posts/django-db/index.html",
    "href": "posts/django-db/index.html",
    "title": "Adding a Database to a Django App",
    "section": "",
    "text": "Most Django apps store and work with data, e.g., entered by users. Django supports multiple relational databases for persistent storage of such data out of the box. In this blog post, I show how to a database to a Django app. For local development, I use the default SQLite database and for production deployment on Heroku, I use PostgreSQL® 1.\nI use the Django “Hello World” App as simple example. I add a button that users can click to say “Hello World!” and count how often it was clicked. The number of clicks is stored in a database and displayed in the app.\nThe whole process is very simple as Django does most of the work in the background: Creating the database, making the queries, etc."
  },
  {
    "objectID": "posts/django-db/index.html#using-the-model-in-the-django-app",
    "href": "posts/django-db/index.html#using-the-model-in-the-django-app",
    "title": "Adding a Database to a Django App",
    "section": "Using the Model in the Django App",
    "text": "Using the Model in the Django App\nTo integrate the model into the “Hello World” app, I first create a view that handles the interaction with the model. In helloworld/views.py:\nfrom django.shortcuts import render\n\nfrom .models import Counter\n\n\ndef index(request):\n    # retriever counter model instance from DB or create it if it doesn't exist yet\n    counter, created = Counter.objects.get_or_create(name='hello-world-button')\n\n    # increment counter when a POST request arrives (from the button click)\n    if request.method == 'POST':\n        counter.value += 1\n        counter.save()\n\n    context = {\n        'clicks': counter.value,\n    }\n    return render(request, 'helloworld/index.html', context)\nThis view replaces the previous TemplateView in the app’s URL settings (helloworld/urls.py):\nfrom django.urls import path\n\nfrom . import views\n\n\napp_name = 'helloworld'\n\nurlpatterns = [\n    # path('', TemplateView.as_view(template_name='helloworld/index.html'), name='index'),\n    path('', views.index, name='index'),\n]\nFinally, I need to adjust the template to add a button and display the number of times it was clicked (helloworld/templates/helloworld/index.html):\nHello World! ({{ clicks }}x)\n\n&lt;form action=\"{% url 'helloworld:index' %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    &lt;button type=\"submit\" name=\"hello-world-button\"&gt;Greet the world!&lt;/button&gt;\n&lt;/form&gt;\nWhen running the app, it should now look like this:\n\nClicking the button should reload the page and show an increased click count (here, “2x”). The click count should persist even when the app server is restarted or the app is updated.\nOf course, this is super slow and just an example for illustrating persistent storage in Django. In production, this should happen asynchronously with some frontend framework."
  },
  {
    "objectID": "posts/django-db/index.html#footnotes",
    "href": "posts/django-db/index.html#footnotes",
    "title": "Adding a Database to a Django App",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPostgres, PostgreSQL and the Slonik Logo are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission.↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I am Stefan. I hold a computer science Ph.D. and am passionate about learning new things. I use this blog to take notes for myself - and possibly help others.\nContact details and more information about myself are on my website.\nI created this blog using Quarto."
  }
]